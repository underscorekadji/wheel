name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  actions: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-hash: ${{ steps.build-info.outputs.hash }}
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Releasing version: $VERSION"

      - name: Generate build info
        id: build-info
        run: |
          BUILD_HASH=$(echo ${{ github.sha }} | cut -c1-8)
          echo "hash=$BUILD_HASH" >> "$GITHUB_OUTPUT"

      - name: Check if should deploy
        id: check
        run: |
          # Only deploy if this is a proper version tag (starts with v)
          if [[ "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "should-deploy=true" >> "$GITHUB_OUTPUT"
          else
            echo "should-deploy=false" >> "$GITHUB_OUTPUT"
          fi

  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run quality gates
        run: |
          npm run format:check
          npm run lint
          npm run type-check

      - name: Build application
        run: npm run build

      - name: Generate release build info
        run: |
          echo "Version: ${{ needs.prepare-release.outputs.version }}" > .next/build-info.txt
          echo "Commit: ${{ github.sha }}" >> .next/build-info.txt
          echo "Build time: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> .next/build-info.txt
          echo "Release: true" >> .next/build-info.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-build-${{ needs.prepare-release.outputs.build-hash }}
          path: .next/
          retention-days: 30

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: needs.prepare-release.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/prod/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            COMMIT_SHA=${{ github.sha }}

      - name: Output image digest
        run: |
          echo "Image digest: ${{ steps.build.outputs.digest }}"

  smoke-test:
    name: Smoke Test & Health Check
    runs-on: ubuntu-latest
    needs: [prepare-release, docker-build]
    if: needs.prepare-release.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}"
          docker pull "$IMAGE_TAG"
          docker tag "$IMAGE_TAG" wheel-app:latest

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate SSL certificates
        run: ./docker/ssl/generate-certs.sh

      - name: Run nginx validation test
        run: ./docker/validate-nginx.sh

      - name: Start Docker Compose services
        run: |
          cd docker/dev
          # Use the release image
          COMPOSE_PROJECT_NAME=release-test docker compose up -d redis nginx

          # Start the app container with the release image
          docker run -d \
            --name wheel-app-release-test \
            --network release-test_wheel-network \
            -e NODE_ENV=production \
            -e PORT=3000 \
            -e REDIS_URL=redis://redis:6379 \
            wheel-app:latest

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if docker logs wheel-app-release-test 2>&1 | grep -q "Ready\|started\|listening"; then
              echo "Application appears to be starting..."
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done

          # Additional wait for full startup
          sleep 10

      - name: Comprehensive health check
        run: |
          echo "Testing health endpoint..."

          # Get the container IP
          APP_IP=$(docker inspect wheel-app-release-test --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
          echo "App container IP: $APP_IP"

          # Test health endpoint
          for i in {1..10}; do
            if curl -f -s "http://$APP_IP:3000/api/health"; then
              echo "✅ Health endpoint responded successfully"
              break
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 3
          done

          # Verify the response content
          RESPONSE=$(curl -s "http://$APP_IP:3000/api/health")
          echo "Health endpoint response: $RESPONSE"

          # Check if response contains expected fields
          if echo "$RESPONSE" | jq -e '.status == "healthy" and .service == "wheel-app"' > /dev/null; then
            echo "✅ Health endpoint returned expected response"
          else
            echo "❌ Health endpoint response is invalid"
            exit 1
          fi

          # Additional release-specific checks
          echo "Running extended health checks for release..."
          
          # Test root endpoint
          if curl -f -s "http://$APP_IP:3000/" > /dev/null; then
            echo "✅ Root endpoint accessible"
          else
            echo "❌ Root endpoint failed"
            exit 1
          fi

      - name: Performance baseline check
        run: |
          echo "Running basic performance check..."
          APP_IP=$(docker inspect wheel-app-release-test --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
          
          # Simple response time check
          START_TIME=$(date +%s%N)
          curl -s "http://$APP_IP:3000/api/health" > /dev/null
          END_TIME=$(date +%s%N)
          RESPONSE_TIME=$((($END_TIME - $START_TIME) / 1000000))
          
          echo "Health endpoint response time: ${RESPONSE_TIME}ms"
          if [ $RESPONSE_TIME -gt 1000 ]; then
            echo "⚠️ Response time is above 1000ms, consider investigation"
          else
            echo "✅ Response time is acceptable"
          fi

      - name: Show container logs on failure
        if: failure()
        run: |
          echo "=== App container logs ==="
          docker logs wheel-app-release-test || echo "No app logs available"
          echo "=== Redis container logs ==="
          docker logs release-test-redis-1 || echo "No redis logs available"
          echo "=== Nginx container logs ==="
          docker logs release-test-nginx-1 || echo "No nginx logs available"

      - name: Cleanup Docker containers
        if: always()
        run: |
          docker stop wheel-app-release-test || true
          docker rm wheel-app-release-test || true
          cd docker/dev
          COMPOSE_PROJECT_NAME=release-test docker compose down -v || true

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, docker-build, smoke-test]
    if: always()
    steps:
      - name: Print release summary
        run: |
          echo "## Release Summary"
          echo "**Version:** ${{ needs.prepare-release.outputs.version }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Build Status:** ${{ needs.build-and-test.result }}"
          echo "**Docker Build:** ${{ needs.docker-build.result }}"
          echo "**Smoke Test:** ${{ needs.smoke-test.result }}"
          echo ""
          if [ "${{ needs.docker-build.result }}" = "success" ] && [ "${{ needs.smoke-test.result }}" = "success" ]; then
            echo "🎉 **Release ${{ needs.prepare-release.outputs.version }} is ready for deployment!**"
            echo ""
            echo "**Docker Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}"
          else
            echo "❌ **Release ${{ needs.prepare-release.outputs.version }} failed**"
            echo "Please check the logs and fix issues before re-releasing."
          fi
